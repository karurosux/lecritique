services:
  postgres:
    image: postgres:16-alpine
    container_name: kyooar-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-kyooar}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kyooar_password}
      POSTGRES_DB: ${POSTGRES_DB:-kyooar}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kyooar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kyooar"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      target: api
    image: kyooar-backend:latest
    container_name: kyooar-backend
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-kyooar}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-kyooar_password}
      DB_NAME: ${POSTGRES_DB:-kyooar}
      DB_SSLMODE: disable
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      APP_ENV: ${APP_ENV:-production}
      RUN_SEEDS: ${RUN_SEEDS:-true}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kyooar-network

  frontend:
    build:
      context: .
      target: web
    image: kyooar-frontend:latest
    container_name: kyooar-frontend
    ports:
      - "3000:3000"
    environment:
      PUBLIC_API_URL: ${PUBLIC_API_URL:-http://backend:8080}
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      - backend
    networks:
      - kyooar-network

volumes:
  postgres_data:

networks:
  kyooar-network:
    driver: bridge
