package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"time"

	"kyooar/internal/shared/config"
	"kyooar/internal/shared/database"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

func main() {
	cfg, err := config.Load()
	if err != nil {
		log.Fatal("Failed to load configuration:", err)
	}

	db, err := database.Initialize(cfg)
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	// Seed random number generator
	rand.Seed(time.Now().UnixNano())

	// Create two organizations with different themes
	organizations := []struct {
		email       string
		password    string
		companyName string
		orgName     string
		orgDesc     string
		orgPhone    string
		orgWebsite  string
		products    []Product
		qrCodes     []QRCode
	}{
		{
			email:       "admin@explorelocal.com",
			password:    "tourist123",
			companyName: "Explore Local Tours",
			orgName:     "Explore Local - Tourist Guides",
			orgDesc:     "Premium local tourist guide services with experienced guides",
			orgPhone:    "+1-555-TOURS",
			orgWebsite:  "https://explorelocal.com",
			products: []Product{
				{"City Walking Tour", "2-hour guided walking tour of historic downtown", 45.00, "Tours"},
				{"Food & Culture Tour", "4-hour culinary journey through local neighborhoods", 89.00, "Tours"},
				{"Museum Package", "All-day museum pass with guided explanations", 65.00, "Tours"},
				{"Sunset Boat Tour", "Evening boat tour with champagne service", 120.00, "Tours"},
				{"Private Group Tour", "Customized private tour for groups up to 20", 350.00, "Tours"},
				{"Photography Tour", "Guided tour to the best photo spots with tips", 75.00, "Tours"},
			},
			qrCodes: []QRCode{
				{"TOUR-DESK-01", "Reception Desk", "feedback_point"},
				{"TOUR-BUS-01", "Tour Bus #1", "vehicle"},
				{"TOUR-BUS-02", "Tour Bus #2", "vehicle"},
				{"TOUR-MEETING", "Meeting Point Plaza", "location"},
				{"TOUR-OFFICE", "Main Office", "feedback_point"},
			},
		},
		{
			email:       "admin@quickprint.com",
			password:    "print123",
			companyName: "QuickPrint Services",
			orgName:     "QuickPrint - Call & Print Center",
			orgDesc:     "Fast printing, copying, and call center services",
			orgPhone:    "+1-555-PRINT",
			orgWebsite:  "https://quickprint.com",
			products: []Product{
				{"B&W Printing", "Black and white printing per page", 0.10, "Printing"},
				{"Color Printing", "Full color printing per page", 0.50, "Printing"},
				{"Poster Printing", "Large format poster printing (24x36)", 25.00, "Printing"},
				{"Business Cards", "500 premium business cards", 45.00, "Printing"},
				{"Binding Service", "Professional document binding", 5.00, "Services"},
				{"International Calls", "Per minute international calling", 0.25, "Call Services"},
				{"Fax Service", "Send or receive fax per page", 2.00, "Services"},
				{"Scanning Service", "Document scanning per page", 0.15, "Services"},
			},
			qrCodes: []QRCode{
				{"PRINT-DESK-01", "Service Counter 1", "counter"},
				{"PRINT-DESK-02", "Service Counter 2", "counter"},
				{"PRINT-SELF-01", "Self Service Station 1", "kiosk"},
				{"PRINT-SELF-02", "Self Service Station 2", "kiosk"},
				{"PRINT-CALL-01", "Call Booth 1", "booth"},
				{"PRINT-CALL-02", "Call Booth 2", "booth"},
				{"PRINT-PICKUP", "Order Pickup Area", "location"},
			},
		},
	}

	// Check and create subscription plans if needed
	var subscriptionPlanID string
	result := db.Table("subscription_plans").Select("id").Where("code = ? AND is_active = true", "professional").First(&subscriptionPlanID)
	if result.Error == gorm.ErrRecordNotFound {
		fmt.Println("⚠️  Professional subscription plan not found, using starter plan")
		db.Table("subscription_plans").Select("id").Where("code = ? AND is_active = true", "starter").First(&subscriptionPlanID)
	}

	for _, org := range organizations {
		fmt.Printf("\n🏢 Creating organization: %s\n", org.companyName)
		
		// Check if account exists
		var existingAccount struct {
			ID string `gorm:"column:id"`
		}
		result := db.Table("accounts").Select("id").Where("email = ?", org.email).First(&existingAccount)
		if result.Error == nil {
			fmt.Printf("❌ User with email %s already exists\n", org.email)
			if len(os.Args) > 1 && os.Args[1] == "--force" {
				fmt.Println("🔄 Deleting existing user...")
				if err := db.Exec("DELETE FROM accounts WHERE email = ?", org.email).Error; err != nil {
					log.Printf("Failed to delete existing user: %v\n", err)
					continue
				}
			} else {
				continue
			}
		}

		// Create account
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(org.password), bcrypt.DefaultCost)
		if err != nil {
			log.Printf("Failed to hash password: %v\n", err)
			continue
		}

		var accountID string
		err = db.Raw(`
			INSERT INTO accounts (email, password_hash, name, is_active, email_verified, email_verified_at)
			VALUES (?, ?, ?, true, true, NOW())
			RETURNING id
		`, org.email, string(hashedPassword), org.companyName).Scan(&accountID).Error
		
		if err != nil {
			log.Printf("Failed to create account: %v\n", err)
			continue
		}
		fmt.Printf("✅ Created account: %s\n", org.email)

		// Create owner team member
		err = db.Exec(`
			INSERT INTO team_members (account_id, member_id, role, invited_by, invited_at, accepted_at, created_at, updated_at)
			VALUES (?, ?, 'OWNER', ?, NOW(), NOW(), NOW(), NOW())
		`, accountID, accountID, accountID).Error
		if err != nil {
			log.Printf("Failed to create team member: %v\n", err)
		}

		// Create subscription
		if subscriptionPlanID != "" {
			err = db.Exec(`
				INSERT INTO subscriptions (account_id, plan_id, status, current_period_start, current_period_end)
				VALUES (?, ?, 'active', NOW(), NOW() + INTERVAL '1 month')
			`, accountID, subscriptionPlanID).Error
			if err != nil {
				log.Printf("Failed to create subscription: %v\n", err)
			}
		}

		// Create organization
		var organizationID string
		err = db.Raw(`
			INSERT INTO organizations (account_id, name, description, email, phone, website, is_active)
			VALUES (?, ?, ?, ?, ?, ?, true)
			RETURNING id
		`, accountID, org.orgName, org.orgDesc, org.email, org.orgPhone, org.orgWebsite).Scan(&organizationID).Error
		
		if err != nil {
			log.Printf("Failed to create organization: %v\n", err)
			continue
		}
		fmt.Printf("✅ Created organization: %s\n", org.orgName)

		// Create location
		locationName := "Main Office"
		if org.companyName == "Explore Local Tours" {
			err = db.Exec(`
				INSERT INTO locations (organization_id, name, address, city, state, country, postal_code, is_active)
				VALUES (?, ?, ?, ?, ?, ?, ?, true)
			`, organizationID, locationName, "789 Tourism Plaza", "San Francisco", "CA", "USA", "94102").Error
		} else {
			err = db.Exec(`
				INSERT INTO locations (organization_id, name, address, city, state, country, postal_code, is_active)
				VALUES (?, ?, ?, ?, ?, ?, ?, true)
			`, organizationID, locationName, "456 Business Center", "New York", "NY", "USA", "10001").Error
		}
		if err != nil {
			log.Printf("Failed to create location: %v\n", err)
			continue
		}

		// Create products
		productIDs := make(map[string]string)
		for _, product := range org.products {
			var productID string
			err = db.Raw(`
				INSERT INTO products (organization_id, name, description, price, currency, category, is_active)
				VALUES (?, ?, ?, ?, 'USD', ?, true)
				RETURNING id
			`, organizationID, product.Name, product.Description, product.Price, product.Category).Scan(&productID).Error
			
			if err != nil {
				log.Printf("Failed to create product %s: %v\n", product.Name, err)
			} else {
				productIDs[product.Name] = productID
				fmt.Printf("✅ Created product: %s\n", product.Name)
			}
		}

		// Create QR codes
		qrCodeIDs := make(map[string]string)
		for _, qr := range org.qrCodes {
			var qrID string
			err = db.Raw(`
				INSERT INTO qr_codes (organization_id, location, code, label, type, is_active, expires_at)
				VALUES (?, ?, ?, ?, ?, true, NOW() + INTERVAL '2 years')
				RETURNING id
			`, organizationID, locationName, qr.Code, qr.Label, qr.Type).Scan(&qrID).Error
			
			if err != nil {
				log.Printf("Failed to create QR code %s: %v\n", qr.Code, err)
			} else {
				qrCodeIDs[qr.Code] = qrID
				fmt.Printf("✅ Created QR code: %s (%s)\n", qr.Code, qr.Label)
			}
		}

		// Create questionnaires
		if org.companyName == "Explore Local Tours" {
			createTourQuestionnaires(db, organizationID, productIDs)
		} else {
			createPrintQuestionnaires(db, organizationID, productIDs)
		}

		// Create feedback
		if len(qrCodeIDs) > 0 && len(productIDs) > 0 {
			createFeedback(db, organizationID, qrCodeIDs, productIDs, org.companyName == "Explore Local Tours")
		}
	}

	fmt.Println("\n🎉 Complex seed data created successfully!")
	fmt.Println("\n📧 Login credentials:")
	fmt.Println("Tourist Guide Company: admin@explorelocal.com / tourist123")
	fmt.Println("Print Service Company: admin@quickprint.com / print123")
}

type Product struct {
	Name        string
	Description string
	Price       float64
	Category    string
}

type QRCode struct {
	Code  string
	Label string
	Type  string
}

func createTourQuestionnaires(db *gorm.DB, orgID string, productIDs map[string]string) []string {
	var questionnaireIDs []string

	// Create questionnaires and questions for each product
	for productName, productID := range productIDs {
		// Create product-specific questionnaire
		var qID string
		err := db.Raw(`
			INSERT INTO questionnaires (organization_id, product_id, name, description, is_active)
			VALUES (?, ?, ?, ?, true)
			RETURNING id
		`, orgID, productID, fmt.Sprintf("%s Feedback", productName), "Help us improve your tour experience").Scan(&qID).Error
		
		if err == nil {
			questionnaireIDs = append(questionnaireIDs, qID)
			
			// Add questions for this product
			questions := []struct {
				text     string
				qtype    string
				required bool
				options  []string
			}{
				{"How would you rate your overall tour experience?", "rating", true, nil},
				{"How knowledgeable was your tour guide?", "scale", true, nil},
				{"Would you recommend this tour to friends?", "yes_no", true, nil},
				{"What did you enjoy most about the tour?", "text", false, nil},
				{"What aspects could we improve?", "multi_choice", false, []string{"Guide knowledge", "Tour duration", "Group size", "Meeting point", "Price value", "Route selection"}},
				{"Overall satisfaction level", "scale", true, nil},
			}

			for i, q := range questions {
				var optionsJSON interface{}
				if q.options != nil {
					optionsJSON = q.options
				}
				
				err = db.Exec(`
					INSERT INTO questions (product_id, text, type, is_required, options, display_order)
					VALUES (?, ?, ?, ?, ?, ?)
				`, productID, q.text, q.qtype, q.required, optionsJSON, i+1).Error
				
				if err != nil {
					fmt.Printf("Failed to create question for %s: %v\n", productName, err)
				}
			}
		}
	}

	return questionnaireIDs
}

func createPrintQuestionnaires(db *gorm.DB, orgID string, productIDs map[string]string) []string {
	var questionnaireIDs []string

	// Create questionnaires and questions for each product
	for productName, productID := range productIDs {
		// Create product-specific questionnaire
		var qID string
		err := db.Raw(`
			INSERT INTO questionnaires (organization_id, product_id, name, description, is_active)
			VALUES (?, ?, ?, ?, true)
			RETURNING id
		`, orgID, productID, fmt.Sprintf("%s Feedback", productName), "Help us improve our services").Scan(&qID).Error
		
		if err == nil {
			questionnaireIDs = append(questionnaireIDs, qID)
			
			// Add questions for this product
			questions := []struct {
				text     string
				qtype    string
				required bool
				options  []string
			}{
				{"How satisfied are you with our service?", "rating", true, nil},
				{"How was the waiting time?", "scale", true, nil},
				{"Would you use our services again?", "yes_no", true, nil},
				{"Quality of the service/materials", "rating", true, nil},
				{"Staff helpfulness", "rating", true, nil},
				{"Any suggestions for improvement?", "text", false, nil},
			}

			// Add service-specific questions
			if productName == "International Calls" || productName == "Fax Service" {
				questions = append(questions, struct {
					text     string
					qtype    string
					required bool
					options  []string
				}{"Call/connection quality", "scale", true, nil})
			}

			for i, q := range questions {
				var optionsJSON interface{}
				if q.options != nil {
					optionsJSON = q.options
				}
				
				err = db.Exec(`
					INSERT INTO questions (product_id, text, type, is_required, options, display_order)
					VALUES (?, ?, ?, ?, ?, ?)
				`, productID, q.text, q.qtype, q.required, optionsJSON, i+1).Error
				
				if err != nil {
					fmt.Printf("Failed to create question for %s: %v\n", productName, err)
				}
			}
		}
	}

	return questionnaireIDs
}

func createFeedback(db *gorm.DB, orgID string, qrCodeIDs map[string]string, productIDs map[string]string, isTourCompany bool) {
	// Generate feedback over the past 60 days
	now := time.Now()
	
	// Different patterns for different companies
	feedbackCounts := map[string]int{}
	if isTourCompany {
		// Tourist company has more weekend traffic
		feedbackCounts = map[string]int{
			"TOUR-DESK-01":  25,
			"TOUR-BUS-01":   45,
			"TOUR-BUS-02":   38,
			"TOUR-MEETING":  15,
			"TOUR-OFFICE":   20,
		}
	} else {
		// Print shop has more weekday traffic
		feedbackCounts = map[string]int{
			"PRINT-DESK-01": 55,
			"PRINT-DESK-02": 48,
			"PRINT-SELF-01": 35,
			"PRINT-SELF-02": 32,
			"PRINT-CALL-01": 22,
			"PRINT-CALL-02": 18,
			"PRINT-PICKUP":  25,
		}
	}

	customerNames := []string{
		"John Smith", "Emma Johnson", "Michael Brown", "Sarah Davis", "William Wilson",
		"Jennifer Garcia", "David Martinez", "Lisa Anderson", "Robert Taylor", "Maria Rodriguez",
		"James Thomas", "Patricia Lee", "Charles White", "Linda Harris", "Daniel Martin",
		"Barbara Thompson", "Joseph Clark", "Elizabeth Lewis", "Thomas Walker", "Susan Hall",
		"Christopher Young", "Jessica Allen", "Matthew King", "Nancy Wright", "Anthony Lopez",
	}

	customerEmails := []string{
		"customer1@email.com", "customer2@email.com", "customer3@email.com", "customer4@email.com",
		"customer5@email.com", "customer6@email.com", "customer7@email.com", "customer8@email.com",
		"", "", "", "", // Some customers don't provide email
	}

	// Convert productIDs map to slice for random selection
	var productIDsList []string
	for _, id := range productIDs {
		productIDsList = append(productIDsList, id)
	}

	fmt.Printf("\n📝 Creating feedback for organization...\n")

	for qrCode, count := range feedbackCounts {
		qrID, exists := qrCodeIDs[qrCode]
		if !exists {
			continue
		}

		for i := 0; i < count; i++ {
			// Spread feedback over past 60 days
			daysAgo := rand.Intn(60)
			feedbackDate := now.AddDate(0, 0, -daysAgo)
			
			// More feedback during business hours
			hour := 9 + rand.Intn(10) // 9 AM to 7 PM
			if isTourCompany && (feedbackDate.Weekday() == time.Saturday || feedbackDate.Weekday() == time.Sunday) {
				hour = 8 + rand.Intn(12) // 8 AM to 8 PM on weekends
			}
			feedbackDate = time.Date(feedbackDate.Year(), feedbackDate.Month(), feedbackDate.Day(), hour, rand.Intn(60), 0, 0, feedbackDate.Location())

			// Select random product
			productID := productIDsList[rand.Intn(len(productIDsList))]

			// Random customer info
			customerName := customerNames[rand.Intn(len(customerNames))]
			customerEmail := customerEmails[rand.Intn(len(customerEmails))]
			if customerEmail == "" {
				customerEmail = fmt.Sprintf("%s.%d@example.com", qrCode, i)
			}

			// Get questions for this product
			var questions []struct {
				ID      string `gorm:"column:id"`
				Text    string `gorm:"column:text"`
				Type    string `gorm:"column:type"`
				Options []string `gorm:"column:options;type:text[]"`
			}
			db.Table("questions").Select("id, text, type, options").Where("product_id = ?", productID).Find(&questions)

			if len(questions) == 0 {
				continue // Skip if no questions for this product
			}

			// Create responses JSONB array
			responses := make([]map[string]interface{}, 0)
			overallRating := 3 + rand.Intn(3) // 3-5 stars for overall rating

			for _, q := range questions {
				var answer interface{}
				switch q.Type {
				case "rating":
					// Mostly positive ratings with some variation
					answer = 3 + rand.Intn(3) // 3-5 stars
				case "scale":
					// Scale 1-10
					answer = 6 + rand.Intn(5) // 6-10
				case "yes_no":
					// 80% positive
					if rand.Float32() < 0.8 {
						answer = "yes"
					} else {
						answer = "no"
					}
				case "multi_choice":
					// Select 1-3 random options
					if len(q.Options) > 0 {
						selected := rand.Intn(min(3, len(q.Options))) + 1
						selectedOptions := make([]string, 0)
						used := make(map[int]bool)
						
						for j := 0; j < selected; j++ {
							for {
								idx := rand.Intn(len(q.Options))
								if !used[idx] {
									selectedOptions = append(selectedOptions, q.Options[idx])
									used[idx] = true
									break
								}
							}
						}
						answer = selectedOptions
					}
				case "text":
					// Random feedback comments
					if isTourCompany {
						comments := []string{
							"Great tour! The guide was very knowledgeable.",
							"Enjoyed the experience, would definitely recommend.",
							"Good tour but a bit rushed at some locations.",
							"Amazing views and interesting historical facts.",
							"The guide was friendly and answered all our questions.",
							"Would have preferred a smaller group size.",
							"Excellent value for money!",
							"The meeting point was a bit hard to find.",
						}
						answer = comments[rand.Intn(len(comments))]
					} else {
						comments := []string{
							"Fast service, good quality prints.",
							"Staff was helpful with my printing needs.",
							"Prices are reasonable for the quality.",
							"Quick turnaround time, very satisfied.",
							"The self-service stations are easy to use.",
							"Would appreciate extended hours.",
							"Great for last-minute printing needs.",
							"International calling rates are competitive.",
						}
						answer = comments[rand.Intn(len(comments))]
					}
				}

				if answer != nil {
					responses = append(responses, map[string]interface{}{
						"question_id": q.ID,
						"question":    q.Text,
						"answer":      answer,
					})
				}
			}

			// Create feedback record
			err := db.Exec(`
				INSERT INTO feedbacks (organization_id, product_id, qr_code_id, customer_name, customer_email, overall_rating, responses, created_at, updated_at)
				VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
			`, orgID, productID, qrID, customerName, customerEmail, overallRating, responses, feedbackDate, feedbackDate).Error

			if err != nil {
				log.Printf("Failed to create feedback: %v\n", err)
				continue
			}
		}
		fmt.Printf("✅ Created %d feedback responses for %s\n", count, qrCode)
	}
}

// Helper function to get minimum of two integers
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func splitOptions(options string) []string {
	// Simple comma split - in production you'd want proper CSV parsing
	result := []string{}
	current := ""
	for _, char := range options {
		if char == ',' {
			if current != "" {
				result = append(result, current)
				current = ""
			}
		} else {
			current += string(char)
		}
	}
	if current != "" {
		result = append(result, current)
	}
	return result
}

func joinOptions(options []string) string {
	result := ""
	for i, opt := range options {
		if i > 0 {
			result += ","
		}
		result += opt
	}
	return result
}