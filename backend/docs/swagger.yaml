definitions:
  analyticsmodel.ChoiceInfo:
    properties:
      choice:
        type: string
      count:
        type: integer
    type: object
  analyticsmodel.ChoiceSeriesData:
    properties:
      choice:
        type: string
      points:
        items:
          $ref: '#/definitions/analyticsmodel.TimeSeriesPoint'
        type: array
      statistics:
        $ref: '#/definitions/analyticsmodel.TimeSeriesStats'
    type: object
  analyticsmodel.ComparisonInsight:
    properties:
      change:
        type: number
      message:
        type: string
      metric_type:
        type: string
      recommendation:
        type: string
      severity:
        type: string
      type:
        type: string
    type: object
  analyticsmodel.ComparisonRequest:
    properties:
      metric_types:
        items:
          type: string
        minItems: 1
        type: array
      organization_id:
        type: string
      period1_end:
        type: string
      period1_start:
        type: string
      period2_end:
        type: string
      period2_start:
        type: string
      product_id:
        type: string
      question_id:
        type: string
    required:
    - metric_types
    - organization_id
    - period1_end
    - period1_start
    - period2_end
    - period2_start
    type: object
  analyticsmodel.ComparisonResponse:
    properties:
      comparisons:
        items:
          $ref: '#/definitions/analyticsmodel.TimeSeriesComparison'
        type: array
      insights:
        items:
          $ref: '#/definitions/analyticsmodel.ComparisonInsight'
        type: array
      request:
        $ref: '#/definitions/analyticsmodel.ComparisonRequest'
    type: object
  analyticsmodel.DateRange:
    properties:
      end:
        type: string
      start:
        type: string
    type: object
  analyticsmodel.TimePeriodMetrics:
    properties:
      average:
        type: number
      choice_distribution:
        additionalProperties:
          format: int64
          type: integer
        type: object
      count:
        type: integer
      data_points:
        items:
          $ref: '#/definitions/analyticsmodel.TimeSeriesPoint'
        type: array
      end_date:
        type: string
      max:
        type: number
      min:
        type: number
      most_popular_choice:
        $ref: '#/definitions/analyticsmodel.ChoiceInfo'
      start_date:
        type: string
      top_choices:
        items:
          $ref: '#/definitions/analyticsmodel.ChoiceInfo'
        type: array
      value:
        type: number
    type: object
  analyticsmodel.TimeSeriesComparison:
    properties:
      change:
        type: number
      change_percent:
        type: number
      metadata:
        type: string
      metric_name:
        type: string
      metric_type:
        type: string
      period1:
        $ref: '#/definitions/analyticsmodel.TimePeriodMetrics'
      period2:
        $ref: '#/definitions/analyticsmodel.TimePeriodMetrics'
      trend:
        type: string
    type: object
  analyticsmodel.TimeSeriesData:
    properties:
      choice_series:
        items:
          $ref: '#/definitions/analyticsmodel.ChoiceSeriesData'
        type: array
      metadata:
        additionalProperties: {}
        type: object
      metric_name:
        type: string
      metric_type:
        type: string
      points:
        items:
          $ref: '#/definitions/analyticsmodel.TimeSeriesPoint'
        type: array
      product_id:
        type: string
      product_name:
        type: string
      statistics:
        $ref: '#/definitions/analyticsmodel.TimeSeriesStats'
    type: object
  analyticsmodel.TimeSeriesPoint:
    properties:
      count:
        type: integer
      timestamp:
        type: string
      value:
        type: number
    type: object
  analyticsmodel.TimeSeriesRequest:
    properties:
      end_date:
        type: string
      granularity:
        enum:
        - hourly
        - daily
        - weekly
        - monthly
        type: string
      metric_types:
        items:
          type: string
        minItems: 1
        type: array
      organization_id:
        type: string
      product_id:
        type: string
      question_id:
        type: string
      start_date:
        type: string
    required:
    - end_date
    - granularity
    - metric_types
    - organization_id
    - start_date
    type: object
  analyticsmodel.TimeSeriesResponse:
    properties:
      request:
        $ref: '#/definitions/analyticsmodel.TimeSeriesRequest'
      series:
        items:
          $ref: '#/definitions/analyticsmodel.TimeSeriesData'
        type: array
      summary:
        $ref: '#/definitions/analyticsmodel.TimeSeriesSummary'
    type: object
  analyticsmodel.TimeSeriesStats:
    properties:
      average:
        type: number
      count:
        type: integer
      max:
        type: number
      min:
        type: number
      total:
        type: number
      trend_direction:
        type: string
      trend_strength:
        type: number
    type: object
  analyticsmodel.TimeSeriesSummary:
    properties:
      date_range:
        $ref: '#/definitions/analyticsmodel.DateRange'
      granularity:
        type: string
      metrics_summary:
        additionalProperties: true
        type: object
      total_data_points:
        type: integer
    type: object
  authmodel.AcceptInvitationRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  authmodel.ChangeEmailRequest:
    properties:
      new_email:
        type: string
    required:
    - new_email
    type: object
  authmodel.ConfirmEmailChangeRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  authmodel.DeactivationResponse:
    properties:
      deactivation_date:
        type: string
      message:
        type: string
    type: object
  authmodel.InvitationResponse:
    properties:
      invitation: {}
      message:
        type: string
    type: object
  authmodel.InviteMemberRequest:
    properties:
      email:
        type: string
      role:
        enum:
        - OWNER
        - ADMIN
        - MANAGER
        - VIEWER
        type: string
    required:
    - email
    - role
    type: object
  authmodel.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  authmodel.MemberListResponse:
    properties:
      members:
        items:
          $ref: '#/definitions/models.TeamMember'
        type: array
    type: object
  authmodel.PasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  authmodel.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      invitation_token:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  authmodel.ResendVerificationRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  authmodel.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  authmodel.TokenResponse:
    properties:
      token:
        type: string
    type: object
  authmodel.UpdateProfileRequest:
    properties:
      name:
        minLength: 1
        type: string
      phone:
        type: string
    type: object
  authmodel.UpdateRoleRequest:
    properties:
      role:
        enum:
        - OWNER
        - ADMIN
        - MANAGER
        - VIEWER
        type: string
    required:
    - role
    type: object
  feedbackmodel.BatchQuestionsRequest:
    properties:
      product_ids:
        items:
          type: string
        type: array
    required:
    - product_ids
    type: object
  feedbackmodel.CreateQuestionRequest:
    properties:
      is_required:
        type: boolean
      max_label:
        type: string
      max_value:
        type: integer
      min_label:
        type: string
      min_value:
        type: integer
      options:
        items:
          type: string
        type: array
      text:
        type: string
      type:
        $ref: '#/definitions/feedbackmodel.QuestionType'
    required:
    - text
    - type
    type: object
  feedbackmodel.CreateQuestionnaireRequest:
    properties:
      description:
        type: string
      is_default:
        type: boolean
      name:
        type: string
      product_id:
        type: string
    required:
    - name
    type: object
  feedbackmodel.DeviceInfo:
    properties:
      browser:
        type: string
      ip:
        type: string
      platform:
        type: string
      user_agent:
        type: string
    type: object
  feedbackmodel.Feedback:
    properties:
      created_at:
        type: string
      customer_email:
        type: string
      customer_name:
        type: string
      customer_phone:
        type: string
      device_info:
        $ref: '#/definitions/feedbackmodel.DeviceInfo'
      id:
        type: string
      is_complete:
        type: boolean
      organization:
        $ref: '#/definitions/organizationmodel.Organization'
      organization_id:
        type: string
      overall_rating:
        type: integer
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      qr_code:
        $ref: '#/definitions/qrcodemodel.QRCode'
      qr_code_id:
        type: string
      responses:
        items:
          $ref: '#/definitions/feedbackmodel.Response'
        type: array
      updated_at:
        type: string
    type: object
  feedbackmodel.GenerateQuestionnaireRequest:
    properties:
      description:
        type: string
      is_default:
        type: boolean
      name:
        type: string
    required:
    - name
    type: object
  feedbackmodel.GeneratedQuestion:
    properties:
      max_label:
        type: string
      max_value:
        type: integer
      min_label:
        type: string
      min_value:
        type: integer
      options:
        items:
          type: string
        type: array
      text:
        type: string
      type:
        $ref: '#/definitions/feedbackmodel.QuestionType'
    type: object
  feedbackmodel.Question:
    properties:
      created_at:
        type: string
      display_order:
        type: integer
      id:
        type: string
      is_required:
        type: boolean
      max_label:
        type: string
      max_value:
        type: integer
      min_label:
        type: string
      min_value:
        type: integer
      options:
        items:
          type: string
        type: array
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      text:
        type: string
      type:
        $ref: '#/definitions/feedbackmodel.QuestionType'
      updated_at:
        type: string
    type: object
  feedbackmodel.QuestionType:
    enum:
    - rating
    - scale
    - multi_choice
    - single_choice
    - text
    - yes_no
    type: string
    x-enum-varnames:
    - QuestionTypeRating
    - QuestionTypeScale
    - QuestionTypeMultiChoice
    - QuestionTypeSingleChoice
    - QuestionTypeText
    - QuestionTypeYesNo
  feedbackmodel.Questionnaire:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_default:
        type: boolean
      name:
        type: string
      organization:
        $ref: '#/definitions/organizationmodel.Organization'
      organization_id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      questions:
        items:
          $ref: '#/definitions/feedbackmodel.Question'
        type: array
      updated_at:
        type: string
    type: object
  feedbackmodel.Response:
    properties:
      answer: {}
      question_id:
        type: string
      question_text:
        type: string
      question_type:
        $ref: '#/definitions/feedbackmodel.QuestionType'
    type: object
  feedbackmodel.UpdateQuestionRequest:
    properties:
      is_required:
        type: boolean
      max_label:
        type: string
      max_value:
        type: integer
      min_label:
        type: string
      min_value:
        type: integer
      options:
        items:
          type: string
        type: array
      text:
        type: string
      type:
        $ref: '#/definitions/feedbackmodel.QuestionType'
    type: object
  handlers.CreateProductRequest:
    properties:
      category:
        type: string
      currency:
        type: string
      description:
        type: string
      name:
        type: string
      organization_id:
        type: string
      price:
        minimum: 0
        type: number
    required:
    - name
    - organization_id
    type: object
  models.Account:
    properties:
      created_at:
        type: string
      deactivation_requested_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      email_verified_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_name:
        type: string
      name:
        type: string
      phone:
        type: string
      subscription: {}
      subscription_id:
        type: string
      team_members:
        items:
          $ref: '#/definitions/models.TeamMember'
        type: array
      updated_at:
        type: string
    type: object
  models.MemberRole:
    enum:
    - OWNER
    - ADMIN
    - MANAGER
    - VIEWER
    type: string
    x-enum-varnames:
    - RoleOwner
    - RoleAdmin
    - RoleManager
    - RoleViewer
  models.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      currency:
        type: string
      description:
        type: string
      display_order:
        type: integer
      id:
        type: string
      image:
        type: string
      is_active:
        type: boolean
      is_available:
        type: boolean
      name:
        type: string
      organization_id:
        type: string
      price:
        type: number
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  models.TeamMember:
    properties:
      accepted_at:
        type: string
      account:
        $ref: '#/definitions/models.Account'
      account_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      invited_at:
        type: string
      invited_by:
        type: string
      member:
        $ref: '#/definitions/models.Account'
      member_id:
        type: string
      role:
        $ref: '#/definitions/models.MemberRole'
      updated_at:
        type: string
    type: object
  organizationmodel.CreateOrganizationRequest:
    properties:
      address:
        type: string
      description:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      website:
        type: string
    required:
    - name
    type: object
  organizationmodel.Organization:
    properties:
      account_id:
        type: string
      address:
        type: string
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      logo:
        type: string
      name:
        type: string
      phone:
        type: string
      settings:
        $ref: '#/definitions/organizationmodel.Settings'
      updated_at:
        type: string
      website:
        type: string
    type: object
  organizationmodel.Settings:
    properties:
      feedback_notification:
        type: boolean
      language:
        type: string
      low_rating_threshold:
        type: integer
      timezone:
        type: string
    type: object
  qrcodecontroller.GenerateQRCodeRequest:
    properties:
      label:
        maxLength: 100
        minLength: 1
        type: string
      location:
        maxLength: 200
        type: string
      organization_id:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/qrcodemodel.QRCodeType'
        enum:
        - table
        - location
        - takeaway
        - delivery
        - general
    required:
    - label
    - organization_id
    - type
    type: object
  qrcodecontroller.UpdateQRCodeRequest:
    properties:
      is_active:
        type: boolean
      label:
        maxLength: 100
        minLength: 1
        type: string
      location:
        maxLength: 200
        type: string
    type: object
  qrcodemodel.QRCode:
    properties:
      code:
        type: string
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      label:
        type: string
      last_scanned_at:
        type: string
      location:
        type: string
      organization:
        $ref: '#/definitions/organizationmodel.Organization'
      organization_id:
        type: string
      scans_count:
        type: integer
      type:
        $ref: '#/definitions/qrcodemodel.QRCodeType'
      updated_at:
        type: string
    type: object
  qrcodemodel.QRCodeType:
    enum:
    - table
    - location
    - takeaway
    - delivery
    - general
    type: string
    x-enum-varnames:
    - QRCodeTypeTable
    - QRCodeTypeLocation
    - QRCodeTypeTakeaway
    - QRCodeTypeDelivery
    - QRCodeTypeGeneral
  response.ErrorData:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
    type: object
  response.Meta:
    properties:
      pagination:
        $ref: '#/definitions/response.Pagination'
      request_id:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  response.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.ErrorData'
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        type: boolean
    type: object
  subscriptioncontroller.CardDetailsResponse:
    properties:
      brand:
        type: string
      exp_month:
        type: integer
      exp_year:
        type: integer
      last4:
        type: string
    type: object
  subscriptioncontroller.CheckoutResponse:
    properties:
      checkout_url:
        type: string
      session_id:
        type: string
    type: object
  subscriptioncontroller.CompleteCheckoutRequest:
    properties:
      session_id:
        type: string
    required:
    - session_id
    type: object
  subscriptioncontroller.CreateCheckoutRequest:
    properties:
      plan_id:
        type: string
    required:
    - plan_id
    type: object
  subscriptioncontroller.CreateSubscriptionRequest:
    properties:
      plan_id:
        type: string
    required:
    - plan_id
    type: object
  subscriptioncontroller.InvoiceResponse:
    properties:
      amount_due:
        type: integer
      amount_paid:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      hosted_invoice_url:
        type: string
      id:
        type: string
      invoice_pdf:
        type: string
      number:
        type: string
      paid_at:
        type: string
      status:
        type: string
    type: object
  subscriptioncontroller.PaymentMethodResponse:
    properties:
      card:
        $ref: '#/definitions/subscriptioncontroller.CardDetailsResponse'
      id:
        type: string
      is_default:
        type: boolean
      type:
        type: string
    type: object
  subscriptioncontroller.PortalResponse:
    properties:
      portal_url:
        type: string
    type: object
  subscriptioncontroller.SetDefaultPaymentRequest:
    properties:
      payment_method_id:
        type: string
    required:
    - payment_method_id
    type: object
  subscriptioninterface.PermissionResponse:
    properties:
      can_create:
        type: boolean
      current_count:
        type: integer
      max_allowed:
        type: integer
      reason:
        type: string
      subscription_status:
        type: string
    type: object
  subscriptionmodel.Subscription:
    properties:
      account:
        $ref: '#/definitions/models.Account'
      account_id:
        type: string
      cancel_at:
        type: string
      cancelled_at:
        type: string
      created_at:
        type: string
      current_period_end:
        type: string
      current_period_start:
        type: string
      id:
        type: string
      plan:
        $ref: '#/definitions/subscriptionmodel.SubscriptionPlan'
      plan_id:
        type: string
      status:
        $ref: '#/definitions/subscriptionmodel.SubscriptionStatus'
      updated_at:
        type: string
    type: object
  subscriptionmodel.SubscriptionPlan:
    properties:
      code:
        type: string
      created_at:
        type: string
      currency:
        type: string
      description:
        type: string
      has_advanced_analytics:
        type: boolean
      has_basic_analytics:
        type: boolean
      has_custom_branding:
        type: boolean
      has_feedback_explorer:
        type: boolean
      has_priority_support:
        type: boolean
      id:
        type: string
      interval:
        type: string
      is_active:
        type: boolean
      is_visible:
        type: boolean
      max_feedbacks_per_month:
        type: integer
      max_organizations:
        type: integer
      max_qr_codes:
        type: integer
      max_team_members:
        type: integer
      name:
        type: string
      price:
        type: number
      trial_days:
        type: integer
      updated_at:
        type: string
    type: object
  subscriptionmodel.SubscriptionStatus:
    enum:
    - active
    - pending
    - canceled
    - expired
    type: string
    x-enum-varnames:
    - SubscriptionActive
    - SubscriptionPending
    - SubscriptionCanceled
    - SubscriptionExpired
  subscriptionmodel.SubscriptionUsage:
    properties:
      created_at:
        type: string
      feedbacks_count:
        type: integer
      id:
        type: string
      last_updated_at:
        type: string
      locations_count:
        type: integer
      organizations_count:
        type: integer
      period_end:
        type: string
      period_start:
        type: string
      qr_codes_count:
        type: integer
      subscription:
        $ref: '#/definitions/subscriptionmodel.Subscription'
      subscription_id:
        type: string
      team_members_count:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: justdevelopitmx@proton.me
    name: API Support
  description: Organization feedback management system API
  termsOfService: http://swagger.io/terms/
  title: Kyooar API
  version: "1.0"
paths:
  /api/v1/ai/generate-questionnaire/{productId}:
    post:
      consumes:
      - application/json
      description: Generate AI questions and create a complete questionnaire for a
        product
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Questionnaire generation data
        in: body
        name: questionnaire
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.GenerateQuestionnaireRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/feedbackmodel.Questionnaire'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Generate and save AI questionnaire
      tags:
      - questionnaires
      - ai
  /api/v1/ai/generate-questions/{productId}:
    post:
      consumes:
      - application/json
      description: Generate AI-powered questions for a specific product
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/feedbackmodel.GeneratedQuestion'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Generate AI questions
      tags:
      - questionnaires
      - ai
  /api/v1/analytics/dashboard/{organizationId}:
    get:
      consumes:
      - application/json
      description: Get basic analytics metrics for the dashboard including satisfaction,
        recommendation rate, and recent feedback
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get dashboard metrics
      tags:
      - analytics
  /api/v1/analytics/organizations/{organizationId}:
    get:
      consumes:
      - application/json
      description: Get comprehensive analytics data for a organization including ratings,
        feedback counts, and product performance
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get organization analytics
      tags:
      - analytics
  /api/v1/analytics/organizations/{organizationId}/charts:
    get:
      consumes:
      - application/json
      description: Get pre-aggregated chart data for all questions in a organization
        with optional filters
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Start date (YYYY-MM-DD)
        in: query
        name: date_from
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: date_to
        type: string
      - description: Filter by specific product ID
        in: query
        name: product_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get organization chart data
      tags:
      - analytics
  /api/v1/analytics/organizations/{organizationId}/collect-metrics:
    post:
      consumes:
      - application/json
      description: Manually trigger the collection of time series metrics for analytics
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Collect metrics for an organization
      tags:
      - analytics
  /api/v1/analytics/organizations/{organizationId}/compare:
    post:
      consumes:
      - application/json
      description: Compare metrics between two different time periods to identify
        trends and changes
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Comparison request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/analyticsmodel.ComparisonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/analyticsmodel.ComparisonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Compare analytics between two time periods
      tags:
      - analytics
  /api/v1/analytics/organizations/{organizationId}/time-series:
    get:
      consumes:
      - application/json
      description: Get time series data for various metrics with customizable granularity
        and date range
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - collectionFormat: csv
        description: Metric types to retrieve
        in: query
        items:
          type: string
        name: metric_types
        required: true
        type: array
      - description: Start date (ISO 8601)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (ISO 8601)
        in: query
        name: end_date
        required: true
        type: string
      - description: Data granularity (hourly, daily, weekly, monthly)
        in: query
        name: granularity
        required: true
        type: string
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      - description: Filter by question ID
        in: query
        name: question_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/analyticsmodel.TimeSeriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get time series analytics data
      tags:
      - analytics
  /api/v1/analytics/products/{productId}:
    get:
      consumes:
      - application/json
      description: Get detailed analytics data for a specific product including ratings,
        feedback count, and recent feedback
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get product analytics
      tags:
      - analytics
  /api/v1/analytics/products/{productId}/insights:
    get:
      consumes:
      - application/json
      description: Get detailed insights for a specific product including question-level
        analytics
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get product insights
      tags:
      - analytics
  /api/v1/auth/deactivate:
    post:
      consumes:
      - application/json
      description: Request to deactivate the account with a 15-day grace period
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/authmodel.DeactivationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Request account deactivation
      tags:
      - auth
  /api/v1/auth/deactivate/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a pending account deactivation request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Cancel account deactivation
      tags:
      - auth
  /api/v1/auth/email-change:
    post:
      consumes:
      - application/json
      description: Request to change the account email address
      parameters:
      - description: New email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.ChangeEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Request email change
      tags:
      - auth
  /api/v1/auth/email-change/confirm:
    post:
      consumes:
      - application/json
      description: Confirm email change using the token sent to the new email
      parameters:
      - description: Email change token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.ConfirmEmailChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Confirm email change
      tags:
      - auth
  /api/v1/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to the specified email address
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send password reset email
      tags:
      - auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/authmodel.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login to account
      tags:
      - auth
  /api/v1/auth/profile:
    put:
      consumes:
      - application/json
      description: Update user profile information including company name and personal
        details
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an existing JWT token to get a new one
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/authmodel.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new organization owner account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new account
      tags:
      - auth
  /api/v1/auth/resend-verification:
    post:
      consumes:
      - application/json
      description: Resend verification email to the specified email address (public
        endpoint)
      parameters:
      - description: Email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.ResendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Resend email verification
      tags:
      - auth
  /api/v1/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using reset token
      parameters:
      - description: Reset token and new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Reset password
      tags:
      - auth
  /api/v1/auth/send-verification:
    post:
      consumes:
      - application/json
      description: Send verification email to the authenticated account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Send email verification
      tags:
      - auth
  /api/v1/auth/verify-email:
    get:
      consumes:
      - application/json
      description: Verify email address using verification token
      parameters:
      - description: Verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify email address
      tags:
      - auth
  /api/v1/organizations:
    get:
      description: Get all organizations for the authenticated account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/organizationmodel.Organization'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all organizations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Create a new organization for the authenticated account
      parameters:
      - description: Organization details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organizationmodel.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/organizationmodel.Organization'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a new organization
      tags:
      - organizations
  /api/v1/organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a organization from the system
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete organization
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Get a specific organization by its ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/organizationmodel.Organization'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update a organization's information
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update organization
      tags:
      - organizations
  /api/v1/organizations/{organizationId}/analytics:
    get:
      consumes:
      - application/json
      description: Get feedback analytics and statistics for a organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get feedback statistics
      tags:
      - feedback
  /api/v1/organizations/{organizationId}/feedback:
    get:
      consumes:
      - application/json
      description: Get all feedback for a specific organization with pagination and
        optional filters
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search in comments, customer name, or email
        in: query
        name: search
        type: string
      - description: Minimum rating (1-5)
        in: query
        name: rating_min
        type: integer
      - description: Maximum rating (1-5)
        in: query
        name: rating_max
        type: integer
      - description: Start date (YYYY-MM-DD format)
        in: query
        name: date_from
        type: string
      - description: End date (YYYY-MM-DD format)
        in: query
        name: date_to
        type: string
      - description: Filter by specific product ID
        in: query
        name: product_id
        type: string
      - description: Filter by completion status
        in: query
        name: is_complete
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get organization feedback with filters
      tags:
      - feedback
  /api/v1/organizations/{organizationId}/products:
    get:
      consumes:
      - application/json
      description: Get all products for a specific organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get products by organization
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product for a organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - products
  /api/v1/organizations/{organizationId}/products/{productId}:
    delete:
      consumes:
      - application/json
      description: Delete a product from the system
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a specific product by its ID
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product's information
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /api/v1/organizations/{organizationId}/products/{productId}/questions:
    get:
      description: Get all feedback questions for a specific product
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Questions retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get questions for a product
      tags:
      - questions
    post:
      consumes:
      - application/json
      description: Add a new feedback question to a specific product
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Question data
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.CreateQuestionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Question created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add a question to a product
      tags:
      - questions
  /api/v1/organizations/{organizationId}/products/{productId}/questions/{questionId}:
    delete:
      description: Delete a feedback question from a product
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Question deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Question not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a question
      tags:
      - questions
    get:
      description: Get details of a specific question
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Question retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Question not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a specific question
      tags:
      - questions
    put:
      consumes:
      - application/json
      description: Update an existing question for a product
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      - description: Question data
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.UpdateQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Question updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Question not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a question
      tags:
      - questions
  /api/v1/organizations/{organizationId}/products/{productId}/questions/reorder:
    post:
      consumes:
      - application/json
      description: Reorder questions for a specific product
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      - description: Question IDs in new order
        in: body
        name: order
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Questions reordered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reorder questions
      tags:
      - questions
  /api/v1/organizations/{organizationId}/qr-codes:
    get:
      consumes:
      - application/json
      description: Get all QR codes for a specific organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/qrcodemodel.QRCode'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get QR codes by organization
      tags:
      - qr-codes
    post:
      consumes:
      - application/json
      description: Generate a new QR code for a organization
      parameters:
      - description: QR code information
        in: body
        name: qr_code
        required: true
        schema:
          $ref: '#/definitions/qrcodecontroller.GenerateQRCodeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/qrcodemodel.QRCode'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Generate QR code
      tags:
      - qr-codes
  /api/v1/organizations/{organizationId}/questionnaires:
    get:
      consumes:
      - application/json
      description: Get all questionnaires for a organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/feedbackmodel.Questionnaire'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: List questionnaires
      tags:
      - questionnaires
    post:
      consumes:
      - application/json
      description: Create a new questionnaire for a organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Questionnaire data
        in: body
        name: questionnaire
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.CreateQuestionnaireRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/feedbackmodel.Questionnaire'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Create questionnaire
      tags:
      - questionnaires
  /api/v1/organizations/{organizationId}/questionnaires/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a questionnaire
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Delete questionnaire
      tags:
      - questionnaires
    get:
      consumes:
      - application/json
      description: Get a specific questionnaire by ID
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/feedbackmodel.Questionnaire'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get questionnaire
      tags:
      - questionnaires
    put:
      consumes:
      - application/json
      description: Update an existing questionnaire
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: string
      - description: Questionnaire data
        in: body
        name: questionnaire
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.Questionnaire'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/feedbackmodel.Questionnaire'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Update questionnaire
      tags:
      - questionnaires
  /api/v1/organizations/{organizationId}/questions/batch:
    post:
      consumes:
      - application/json
      description: Get essential question fields for multiple products in a single
        request - returns only ID, ProductID, Text, and Type
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.BatchQuestionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Questions retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Organization not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get questions for multiple products (optimized payload)
      tags:
      - questions
  /api/v1/organizations/{organizationId}/questions/products-with-questions:
    get:
      description: Get list of product IDs that have questions for a organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Products with questions retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access denied
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get products that have questions
      tags:
      - questions
  /api/v1/payment/checkout:
    post:
      consumes:
      - application/json
      description: Create a payment checkout session for a subscription plan
      parameters:
      - description: Checkout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/subscriptioncontroller.CreateCheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/subscriptioncontroller.CheckoutResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a checkout session
      tags:
      - payment
  /api/v1/payment/checkout/complete:
    post:
      consumes:
      - application/json
      description: Complete a checkout session after payment
      parameters:
      - description: Complete checkout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/subscriptioncontroller.CompleteCheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Complete a checkout session
      tags:
      - payment
  /api/v1/payment/invoices:
    get:
      description: Get user's invoice history
      parameters:
      - default: 10
        description: Limit number of invoices
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/subscriptioncontroller.InvoiceResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get invoices
      tags:
      - payment
  /api/v1/payment/methods:
    get:
      description: Get list of user's payment methods
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/subscriptioncontroller.PaymentMethodResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: List payment methods
      tags:
      - payment
  /api/v1/payment/methods/default:
    post:
      consumes:
      - application/json
      description: Set a payment method as default
      parameters:
      - description: Set default payment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/subscriptioncontroller.SetDefaultPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Set default payment method
      tags:
      - payment
  /api/v1/payment/portal:
    post:
      description: Create a customer portal session for self-service subscription
        management
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/subscriptioncontroller.PortalResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create customer portal session
      tags:
      - payment
  /api/v1/payment/webhook:
    post:
      consumes:
      - application/json
      description: Handle webhook events from payment provider
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Handle payment webhook
      tags:
      - payment
  /api/v1/plans:
    get:
      consumes:
      - application/json
      description: Retrieve all available subscription plans with their features and
        pricing
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/subscriptionmodel.SubscriptionPlan'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get available subscription plans
      tags:
      - subscription
  /api/v1/public/feedback:
    post:
      consumes:
      - application/json
      description: Submit customer feedback for a product
      parameters:
      - description: Feedback data
        in: body
        name: feedback
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.Feedback'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Submit feedback
      tags:
      - public
  /api/v1/public/organization/{id}/products:
    get:
      consumes:
      - application/json
      description: Get public products for a organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get organization products
      tags:
      - public
  /api/v1/public/organization/{organizationId}/products/{productId}/questions:
    get:
      description: Get all feedback questions for a specific product (public access
        for customer feedback)
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Questions retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get questions for a product
      tags:
      - public
  /api/v1/public/organization/{organizationId}/questions/products-with-questions:
    get:
      description: Get all products that have feedback questions for a organization
        (public access for QR code scans)
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Products with questions retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Organization not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get products with questions
      tags:
      - public
  /api/v1/public/qr/{code}:
    get:
      consumes:
      - application/json
      description: Validate a QR code and return associated data
      parameters:
      - description: QR Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/qrcodemodel.QRCode'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Validate QR code
      tags:
      - public
  /api/v1/public/questionnaire/{organizationId}/{productId}:
    get:
      consumes:
      - application/json
      description: Get questionnaire for a specific product
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      - description: Product ID
        in: path
        name: productId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get questionnaire
      tags:
      - public
  /api/v1/qr-codes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a QR code from the system
      parameters:
      - description: QR Code ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete QR code
      tags:
      - qr-codes
    patch:
      consumes:
      - application/json
      description: Update QR code details like active status, label, or location
      parameters:
      - description: QR Code ID
        in: path
        name: id
        required: true
        type: string
      - description: QR code update information
        in: body
        name: qr_code
        required: true
        schema:
          $ref: '#/definitions/qrcodecontroller.UpdateQRCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/qrcodemodel.QRCode'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update QR code
      tags:
      - qr-codes
  /api/v1/team/accept-invitation:
    post:
      consumes:
      - application/json
      description: Accept a team invitation using the invitation token
      parameters:
      - description: Invitation token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.AcceptInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Accept team invitation
      tags:
      - team
  /api/v1/team/members:
    get:
      consumes:
      - application/json
      description: Get list of team members for the authenticated account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/authmodel.MemberListResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: List team members
      tags:
      - team
  /api/v1/team/members/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a member from the team
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove team member
      tags:
      - team
  /api/v1/team/members/{id}/resend-invitation:
    post:
      consumes:
      - application/json
      description: Resend invitation to a team member
      parameters:
      - description: Invitation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Resend invitation
      tags:
      - team
  /api/v1/team/members/{id}/role:
    put:
      consumes:
      - application/json
      description: Update the role of a team member
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update member role
      tags:
      - team
  /api/v1/team/members/invite:
    post:
      consumes:
      - application/json
      description: Invite a new member to the team
      parameters:
      - description: Member invitation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.InviteMemberRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/authmodel.InvitationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Invite team member
      tags:
      - team
  /api/v1/user/can-create-organization:
    get:
      consumes:
      - application/json
      description: Check if the authenticated user can create more organizations based
        on their subscription plan
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/subscriptioninterface.PermissionResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Check if user can create more organizations
      tags:
      - subscription
  /api/v1/user/subscription:
    delete:
      consumes:
      - application/json
      description: Cancel the current subscription for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Cancel user's subscription
      tags:
      - subscription
    get:
      consumes:
      - application/json
      description: Retrieve the current subscription details for the authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/subscriptionmodel.Subscription'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get user's current subscription
      tags:
      - subscription
    post:
      consumes:
      - application/json
      description: Create a new subscription for the authenticated user
      parameters:
      - description: Subscription details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/subscriptioncontroller.CreateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/subscriptionmodel.Subscription'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a new subscription
      tags:
      - subscription
  /api/v1/user/subscription/usage:
    get:
      consumes:
      - application/json
      description: Retrieve the current subscription usage details for the authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/subscriptionmodel.SubscriptionUsage'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get user's current subscription usage
      tags:
      - subscription
  /organizations/{organizationId}/questionnaires/{id}/questions:
    post:
      consumes:
      - application/json
      description: Add a new question to an existing questionnaire
      parameters:
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: string
      - description: Question data
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.Question'
      produces:
      - application/json
      responses:
        "201":
          description: Question added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add a question to a questionnaire
      tags:
      - questionnaires
  /organizations/{organizationId}/questionnaires/{id}/questions/{questionId}:
    delete:
      consumes:
      - application/json
      description: Delete a question from a questionnaire
      parameters:
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: string
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Question deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a question
      tags:
      - questionnaires
    put:
      consumes:
      - application/json
      description: Update an existing question in a questionnaire
      parameters:
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: string
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: string
      - description: Question data
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/feedbackmodel.Question'
      produces:
      - application/json
      responses:
        "200":
          description: Question updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a question
      tags:
      - questionnaires
  /organizations/{organizationId}/questionnaires/{id}/reorder:
    post:
      consumes:
      - application/json
      description: Reorder questions in a questionnaire
      parameters:
      - description: Questionnaire ID
        in: path
        name: id
        required: true
        type: string
      - description: Question IDs in new order
        in: body
        name: order
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Questions reordered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reorder questions
      tags:
      - questionnaires
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
