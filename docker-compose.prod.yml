services:
  postgres:
    image: postgres:16-alpine
    container_name: kyooar_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-kyooar}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kyooar_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: kyooar_redis_prod
    networks:
      - kyooar_network
    restart: unless-stopped

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kyooar_api_prod
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME:-kyooar}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - kyooar_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kyooar_frontend_prod
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - kyooar_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  kyooar_network:
    driver: bridge
