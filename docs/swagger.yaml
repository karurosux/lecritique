definitions:
  github_com_lecritique_api_internal_menu_models.Dish:
    type: object
  handlers.AuthResponse:
    properties:
      account: {}
      token:
        type: string
    type: object
  handlers.CreateDishRequest:
    properties:
      category:
        type: string
      currency:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      restaurant_id:
        type: string
    required:
    - name
    - restaurant_id
    type: object
  handlers.CreateRestaurantRequest:
    properties:
      description:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      website:
        type: string
    required:
    - name
    type: object
  handlers.GenerateQRCodeRequest:
    properties:
      label:
        maxLength: 100
        minLength: 1
        type: string
      restaurant_id:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.QRCodeType'
        enum:
        - table
        - location
        - takeaway
        - delivery
        - general
    required:
    - label
    - restaurant_id
    - type
    type: object
  handlers.GenerateQRCodeResponse:
    properties:
      data:
        $ref: '#/definitions/models.QRCode'
      success:
        type: boolean
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.QRCodeListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.QRCode'
        type: array
      success:
        type: boolean
    type: object
  handlers.RegisterRequest:
    properties:
      company_name:
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - company_name
    - email
    - password
    type: object
  models.Feedback:
    type: object
  models.Location:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      postal_code:
        type: string
      restaurant:
        $ref: '#/definitions/models.Restaurant'
      restaurant_id:
        type: string
      state:
        type: string
      updated_at:
        type: string
    type: object
  models.QRCode:
    properties:
      code:
        type: string
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      label:
        description: e.g., "Table 1", "Entrance", etc.
        type: string
      last_scanned_at:
        type: string
      location:
        $ref: '#/definitions/models.Location'
      location_id:
        type: string
      restaurant:
        $ref: '#/definitions/models.Restaurant'
      restaurant_id:
        type: string
      scans_count:
        type: integer
      type:
        $ref: '#/definitions/models.QRCodeType'
      updated_at:
        type: string
    type: object
  models.QRCodeType:
    enum:
    - table
    - location
    - takeaway
    - delivery
    - general
    type: string
    x-enum-varnames:
    - QRCodeTypeTable
    - QRCodeTypeLocation
    - QRCodeTypeTakeaway
    - QRCodeTypeDelivery
    - QRCodeTypeGeneral
  models.Restaurant:
    properties:
      account_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      locations:
        items:
          $ref: '#/definitions/models.Location'
        type: array
      logo:
        type: string
      name:
        description: 'Account     Account        `json:"account,omitempty"` // TODO:
          Add when cross-domain refs are ready'
        type: string
      phone:
        type: string
      settings:
        $ref: '#/definitions/models.Settings'
      updated_at:
        type: string
      website:
        type: string
    type: object
  models.Settings:
    properties:
      feedback_notification:
        type: boolean
      language:
        type: string
      low_rating_threshold:
        type: integer
      timezone:
        type: string
    type: object
  response.ErrorData:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
    type: object
  response.Meta:
    properties:
      pagination:
        $ref: '#/definitions/response.Pagination'
      request_id:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  response.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      pages:
        type: integer
      total:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.ErrorData'
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: justdevelopitmx@proton.me
    name: API Support
  description: Restaurant feedback management system API
  termsOfService: http://swagger.io/terms/
  title: LeCritique API
  version: "1.0"
paths:
  /api/health:
    get:
      description: Check if the service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - system
  /api/v1/analytics/dishes/{dishId}:
    get:
      consumes:
      - application/json
      description: Get detailed analytics data for a specific dish including ratings,
        feedback count, and recent feedback
      parameters:
      - description: Dish ID
        in: path
        name: dishId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get dish analytics
      tags:
      - analytics
  /api/v1/analytics/restaurants/{restaurantId}:
    get:
      consumes:
      - application/json
      description: Get comprehensive analytics data for a restaurant including ratings,
        feedback counts, and dish performance
      parameters:
      - description: Restaurant ID
        in: path
        name: restaurantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get restaurant analytics
      tags:
      - analytics
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/handlers.AuthResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login to account
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an existing JWT token to get a new one
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT token
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new restaurant owner account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new account
      tags:
      - auth
  /api/v1/dishes:
    post:
      consumes:
      - application/json
      description: Create a new dish for a restaurant
      parameters:
      - description: Dish information
        in: body
        name: dish
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateDishRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_lecritique_api_internal_menu_models.Dish'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new dish
      tags:
      - dishes
  /api/v1/dishes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a dish from the system
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a dish
      tags:
      - dishes
    get:
      consumes:
      - application/json
      description: Get a specific dish by its ID
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_lecritique_api_internal_menu_models.Dish'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get dish by ID
      tags:
      - dishes
    put:
      consumes:
      - application/json
      description: Update a dish's information
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a dish
      tags:
      - dishes
  /api/v1/public/feedback:
    post:
      consumes:
      - application/json
      description: Submit customer feedback for a dish
      parameters:
      - description: Feedback data
        in: body
        name: feedback
        required: true
        schema:
          $ref: '#/definitions/models.Feedback'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Submit feedback
      tags:
      - public
  /api/v1/public/qr/{code}:
    get:
      consumes:
      - application/json
      description: Validate a QR code and return associated data
      parameters:
      - description: QR Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Validate QR code
      tags:
      - public
  /api/v1/public/questionnaire/{restaurantId}/{dishId}:
    get:
      consumes:
      - application/json
      description: Get questionnaire for a specific dish
      parameters:
      - description: Restaurant ID
        in: path
        name: restaurantId
        required: true
        type: string
      - description: Dish ID
        in: path
        name: dishId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get questionnaire
      tags:
      - public
  /api/v1/public/restaurant/{id}/menu:
    get:
      consumes:
      - application/json
      description: Get public menu for a restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get restaurant menu
      tags:
      - public
  /api/v1/qr-codes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a QR code from the system
      parameters:
      - description: QR Code ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete QR code
      tags:
      - qr-codes
  /api/v1/restaurants:
    get:
      description: Get all restaurants for the authenticated account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Restaurant'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all restaurants
      tags:
      - restaurants
    post:
      consumes:
      - application/json
      description: Create a new restaurant for the authenticated account
      parameters:
      - description: Restaurant details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRestaurantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Restaurant'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a new restaurant
      tags:
      - restaurants
  /api/v1/restaurants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a restaurant from the system
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete restaurant
      tags:
      - restaurants
    get:
      consumes:
      - application/json
      description: Get a specific restaurant by its ID
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Restaurant'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get restaurant by ID
      tags:
      - restaurants
    put:
      consumes:
      - application/json
      description: Update a restaurant's information
      parameters:
      - description: Restaurant ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update restaurant
      tags:
      - restaurants
  /api/v1/restaurants/{restaurantId}/analytics:
    get:
      consumes:
      - application/json
      description: Get feedback analytics and statistics for a restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: restaurantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get feedback statistics
      tags:
      - feedback
  /api/v1/restaurants/{restaurantId}/dishes:
    get:
      consumes:
      - application/json
      description: Get all dishes for a specific restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: restaurantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/github_com_lecritique_api_internal_menu_models.Dish'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get dishes by restaurant
      tags:
      - dishes
  /api/v1/restaurants/{restaurantId}/feedback:
    get:
      consumes:
      - application/json
      description: Get all feedback for a specific restaurant with pagination
      parameters:
      - description: Restaurant ID
        in: path
        name: restaurantId
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get restaurant feedback
      tags:
      - feedback
  /api/v1/restaurants/{restaurantId}/qr-codes:
    get:
      consumes:
      - application/json
      description: Get all QR codes for a specific restaurant
      parameters:
      - description: Restaurant ID
        in: path
        name: restaurantId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.QRCodeListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get QR codes by restaurant
      tags:
      - qr-codes
    post:
      consumes:
      - application/json
      description: Generate a new QR code for a restaurant
      parameters:
      - description: QR code information
        in: body
        name: qr_code
        required: true
        schema:
          $ref: '#/definitions/handlers.GenerateQRCodeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.GenerateQRCodeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Generate QR code
      tags:
      - qr-codes
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
